{"version":3,"sources":["utilities.js","App.js","reportWebVitals.js","index.js"],"names":["fingerJoints","thumb","indexFinger","middlefinger","ringFinger","pinky","drawHand","predictions","ctx","length","forEach","prediction","landmarks","j","Object","keys","finger","k","firstJointIndex","secondJointIndex","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","i","x","y","arc","Math","PI","fillStyle","console","log","fill","App","webcamRef","useRef","canvasRef","runHandpose","a","handpose","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","estimateHands","hand","getContext","className","ref","style","position","marginLeft","marginRight","left","right","textAlign","zindex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11f3f194.chunk.js","sourcesContent":["// Points for fingers\r\n\r\nconst fingerJoints = {\r\n  thumb: [0, 1, 2, 3, 4],\r\n  indexFinger: [0, 5, 6, 7, 8],\r\n  middlefinger: [0, 9, 10, 11, 12],\r\n  ringFinger: [0, 13, 14, 15, 16],\r\n  pinky: [0, 17, 18, 19, 20],\r\n};\r\n\r\n// Drawing function\r\nexport const drawHand = (predictions, ctx) => {\r\n  // Check if we have predictions\r\n  if (predictions.length > 0) {\r\n    // Looop through each prediction\r\n    predictions.forEach((prediction) => {\r\n      // Grab landmarks\r\n      const landmarks = prediction.landmarks;\r\n\r\n      // Loop through fingers\r\n\r\n      for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\r\n        let finger = Object.keys(fingerJoints)[j];\r\n        // Loop through pairs of joints\r\n        for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\r\n          // Get pairs of joints\r\n          const firstJointIndex = fingerJoints[finger][k];\r\n          const secondJointIndex = fingerJoints[finger][k + 1];\r\n\r\n          // Draw Path\r\n\r\n          ctx.beginPath();\r\n          ctx.moveTo(\r\n            landmarks[firstJointIndex][0],\r\n            landmarks[firstJointIndex][1]\r\n          );\r\n          ctx.lineTo(\r\n            landmarks[secondJointIndex][0],\r\n            landmarks[secondJointIndex][1]\r\n          );\r\n\r\n          ctx.strokeStyle = \"plum\";\r\n          ctx.lineWidth = 4;\r\n          ctx.stroke();\r\n        }\r\n      }\r\n\r\n      //loop through landmarks and draw them\r\n      for (let i = 0; i < landmarks.length; i++) {\r\n        // Get x point\r\n        const x = landmarks[i][0];\r\n\r\n        //Get y point\r\n        const y = landmarks[i][1];\r\n        // Start drawing\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, 5, 0, 3 * Math.PI);\r\n\r\n        //Set line color\r\n        ctx.fillStyle = \"blue\";\r\n        console.log(\"drawing\");\r\n        ctx.fill();\r\n      }\r\n    });\r\n  }\r\n};\r\n","import React, { useRef } from \"react\";\n\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand } from \"./utilities\"; \n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runHandpose = async () => {\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded\");\n    // loop and detect hands\n\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async (net) => {\n    // check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get video properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make detections.\n      const hand = await net.estimateHands(video);\n      console.log(hand);\n\n\n       // Draw mesh\n       const ctx = canvasRef.current.getContext(\"2d\");\n       drawHand(hand, ctx);\n    }\n  };\n\n  \n\n  runHandpose();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}